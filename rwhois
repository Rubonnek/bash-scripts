#!/bin/bash
# Author: Wilson E. Alvarez <wilson.e.alvarez1@gmail.com>

# Description: The following whois script parses the provided addresses in
# order to extract only the information that 'whois' and 'dig' need to function
# properly. It also sets the correct dig flags and prints each executed
# command.

# First lets parse the provided address(es) (an IP address or a domain
# name) by removing any unnecessary text.
parsed_address=( `printf "%q\n" "$@" | grep -E -o "([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|([A-Za-z]+\.[A-Za-z0-9]+\.[A-Za-z0-9]+)|([A-Za-z0-9]+\.[A-Za-z0-9]+)" | sort -u` )

# If the parsed_address is still empty by this point, we failed to found an address. We should exit the function.
[[ -z $parsed_address ]] && printf "\nError: could not find an address in the provided string.\n\n" && exit

#Now we need to determined whether the parsed address is an ip or a
#domain name. This will determine the flag for the dig line

for (( index = 0; index < ${#parsed_address[*]}; index++ )); do

	# If the parsed address looks like an ip, we still need verify
	# all its octets are less than 255 and greater than 0
	if [[ ${parsed_address[index]} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
		for field in 1 2 3 4; do
			octet=`printf "${parsed_address[index]}" | cut -d '.' -f$field`
				if (( $octet < 0 || $octet > 255 )); then
					printf "\nWarning: ${parsed_address[index]} is not a valid Internet Protocol address.\n\n"
					not_an_ip=true
					break
				fi
		done
	else
		not_an_ip=true
	fi

		[[ $not_an_ip ]] && dig_flags+=( 'empty' ) || dig_flags+=( '-x' )
		unset not_an_ip
done

# If dig_flags is empty by this point, the provided address is a domain
# name. We can use this later.
#
# If the parsed address is different from the one provided, show a
# warning and then print a new line with the command that will be
# executed

index=$((--index))
if [[ ${parsed_address[index]} == $@ && $index == 0 ]]; then
	/usr/bin/whois ${parsed_address[index]} | sed -e '/^#/d' -e '/^%/d' | cat -s

	if [[ ${dig_flags[index]} == 'empty' ]]; then
		printf "dig ${parsed_address[index]}\n"
		dig ${parsed_address[index]} | head -n -6
	else
		printf "dig ${dig_flags[index]} ${parsed_address[index]} \n"
		dig ${dig_flags[index]} ${parsed_address[index]} |  head -n -6
	fi

	# I like to include two new lines after the above command:
	printf '\n\n'

elif [[ ${parsed_address[index]} != $@ && $index == 0 ]]; then
	printf "\n\e[31m\e[1mProvided address was parsed. Executed command is:\e[0m\n\n"
	printf "whois ${parsed_address[index]}\n"
	/usr/bin/whois ${parsed_address[index]} | sed -e '/^#/d' -e '/^%/d' | cat -s

	if [[ ${dig_flags[index]} == 'empty' ]]; then
		printf "dig ${parsed_address[index]}\n"
		dig ${parsed_address[index]} | head -n -6
	else
		printf "dig ${dig_flags[index]} ${parsed_address[index]} \n"
		dig ${dig_flags[index]} ${parsed_address[index]} |  head -n -6
	fi

	# I like to include two new lines after the above command:
	printf '\n\n'

elif [[ ${parsed_address[index]} != $@ && $index > 0 ]]; then

	printf "\n\e[31m\e[1mProvided addresses were parsed. Executed commands are printed above each query:\e[0m\n\n"

	for (( index = 0; index < ${#parsed_address[*]}; index++ )); do

			printf "whois ${parsed_address[index]}\n"

			/usr/bin/whois ${parsed_address[index]} | sed -e '/^#/d' -e '/^%/d' | cat -s

			# I like to include a new line after the above command:
			printf '\n'

			# If the dig_flags are empty, this means the provided address is a
			# domain name. We need to print a different line for each case.
			if [[ ${dig_flags[index]} == 'empty' ]]; then
				printf "dig ${parsed_address[index]}\n"
				dig ${parsed_address[index]} | head -n -6
			else
				printf "dig ${dig_flags[index]} ${parsed_address[index]} \n"
				dig ${dig_flags[index]} ${parsed_address[index]} |  head -n -6
			fi

			# I like to include two new lines after the above command:
			printf '\n\n'

	done
fi
